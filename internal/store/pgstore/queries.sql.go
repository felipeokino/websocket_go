// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages ("room_id", "message") VALUES ($1, $2) RETURNING "id"
`

type CreateMessageParams struct {
	RoomID  uuid.UUID
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.RoomID, arg.Message)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms ("theme") VALUES ($1) RETURNING "id"
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getMessage = `-- name: GetMessage :one
SELECT id, room_id, message, reactions_count, answered FROM messages WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionsCount,
		&i.Answered,
	)
	return i, err
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, room_id, message, reactions_count, answered FROM messages WHERE room_id = $1
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionsCount,
			&i.Answered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT id, theme FROM rooms WHERE id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT id, theme FROM rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageAsRead = `-- name: MarkMessageAsRead :one
UPDATE messages SET answered = true WHERE id = $1 RETURNING answered
`

func (q *Queries) MarkMessageAsRead(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, markMessageAsRead, id)
	var answered bool
	err := row.Scan(&answered)
	return answered, err
}

const reactToMessage = `-- name: ReactToMessage :one
UPDATE messages SET reactions_count = reactions_count + 1 WHERE id = $1 RETURNING reactions_count
`

func (q *Queries) ReactToMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, reactToMessage, id)
	var reactions_count int64
	err := row.Scan(&reactions_count)
	return reactions_count, err
}

const removeMessageFromRoom = `-- name: RemoveMessageFromRoom :one
DELETE FROM messages WHERE id = $1 RETURNING id
`

func (q *Queries) RemoveMessageFromRoom(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, removeMessageFromRoom, id)
	err := row.Scan(&id)
	return id, err
}

const removeReactionFromMessage = `-- name: RemoveReactionFromMessage :one
UPDATE messages SET reactions_count = CASE WHEN reactions_count > 0 THEN reactions_count - 1 ELSE 0 END WHERE id = $1 RETURNING reactions_count
`

func (q *Queries) RemoveReactionFromMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, removeReactionFromMessage, id)
	var reactions_count int64
	err := row.Scan(&reactions_count)
	return reactions_count, err
}
